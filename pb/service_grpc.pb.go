//export PATH="$PATH:$(go env GOPATH)/bin"
//protoc --go_out=. --go-grpc_out=. proto/*.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SendMessageClient is the client API for SendMessage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SendMessageClient interface {
	Home(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*ResponseStatus, error)
	OpenDB(ctx context.Context, in *RequestDataSourceName, opts ...grpc.CallOption) (*ResponseStatus, error)
	ReturnParts(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*ResponseParts, error)
	ReturnAPart(ctx context.Context, in *RequestPartID, opts ...grpc.CallOption) (*ResponsePart, error)
	AddPart(ctx context.Context, in *RequestAdd, opts ...grpc.CallOption) (*ResponsePart, error)
	DelPart(ctx context.Context, in *RequestPartID, opts ...grpc.CallOption) (*ResponsePart, error)
	UpPart(ctx context.Context, in *RequestUp, opts ...grpc.CallOption) (*ResponsePart, error)
}

type sendMessageClient struct {
	cc grpc.ClientConnInterface
}

func NewSendMessageClient(cc grpc.ClientConnInterface) SendMessageClient {
	return &sendMessageClient{cc}
}

func (c *sendMessageClient) Home(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*ResponseStatus, error) {
	out := new(ResponseStatus)
	err := c.cc.Invoke(ctx, "/SendMessage/Home", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendMessageClient) OpenDB(ctx context.Context, in *RequestDataSourceName, opts ...grpc.CallOption) (*ResponseStatus, error) {
	out := new(ResponseStatus)
	err := c.cc.Invoke(ctx, "/SendMessage/OpenDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendMessageClient) ReturnParts(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*ResponseParts, error) {
	out := new(ResponseParts)
	err := c.cc.Invoke(ctx, "/SendMessage/ReturnParts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendMessageClient) ReturnAPart(ctx context.Context, in *RequestPartID, opts ...grpc.CallOption) (*ResponsePart, error) {
	out := new(ResponsePart)
	err := c.cc.Invoke(ctx, "/SendMessage/ReturnAPart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendMessageClient) AddPart(ctx context.Context, in *RequestAdd, opts ...grpc.CallOption) (*ResponsePart, error) {
	out := new(ResponsePart)
	err := c.cc.Invoke(ctx, "/SendMessage/AddPart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendMessageClient) DelPart(ctx context.Context, in *RequestPartID, opts ...grpc.CallOption) (*ResponsePart, error) {
	out := new(ResponsePart)
	err := c.cc.Invoke(ctx, "/SendMessage/DelPart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendMessageClient) UpPart(ctx context.Context, in *RequestUp, opts ...grpc.CallOption) (*ResponsePart, error) {
	out := new(ResponsePart)
	err := c.cc.Invoke(ctx, "/SendMessage/UpPart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SendMessageServer is the server API for SendMessage service.
// All implementations must embed UnimplementedSendMessageServer
// for forward compatibility
type SendMessageServer interface {
	Home(context.Context, *RequestMessage) (*ResponseStatus, error)
	OpenDB(context.Context, *RequestDataSourceName) (*ResponseStatus, error)
	ReturnParts(context.Context, *RequestMessage) (*ResponseParts, error)
	ReturnAPart(context.Context, *RequestPartID) (*ResponsePart, error)
	AddPart(context.Context, *RequestAdd) (*ResponsePart, error)
	DelPart(context.Context, *RequestPartID) (*ResponsePart, error)
	UpPart(context.Context, *RequestUp) (*ResponsePart, error)
	mustEmbedUnimplementedSendMessageServer()
}

// UnimplementedSendMessageServer must be embedded to have forward compatible implementations.
type UnimplementedSendMessageServer struct {
}

func (UnimplementedSendMessageServer) Home(context.Context, *RequestMessage) (*ResponseStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Home not implemented")
}
func (UnimplementedSendMessageServer) OpenDB(context.Context, *RequestDataSourceName) (*ResponseStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenDB not implemented")
}
func (UnimplementedSendMessageServer) ReturnParts(context.Context, *RequestMessage) (*ResponseParts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnParts not implemented")
}
func (UnimplementedSendMessageServer) ReturnAPart(context.Context, *RequestPartID) (*ResponsePart, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnAPart not implemented")
}
func (UnimplementedSendMessageServer) AddPart(context.Context, *RequestAdd) (*ResponsePart, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPart not implemented")
}
func (UnimplementedSendMessageServer) DelPart(context.Context, *RequestPartID) (*ResponsePart, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelPart not implemented")
}
func (UnimplementedSendMessageServer) UpPart(context.Context, *RequestUp) (*ResponsePart, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpPart not implemented")
}
func (UnimplementedSendMessageServer) mustEmbedUnimplementedSendMessageServer() {}

// UnsafeSendMessageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SendMessageServer will
// result in compilation errors.
type UnsafeSendMessageServer interface {
	mustEmbedUnimplementedSendMessageServer()
}

func RegisterSendMessageServer(s grpc.ServiceRegistrar, srv SendMessageServer) {
	s.RegisterService(&SendMessage_ServiceDesc, srv)
}

func _SendMessage_Home_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendMessageServer).Home(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SendMessage/Home",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendMessageServer).Home(ctx, req.(*RequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _SendMessage_OpenDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDataSourceName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendMessageServer).OpenDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SendMessage/OpenDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendMessageServer).OpenDB(ctx, req.(*RequestDataSourceName))
	}
	return interceptor(ctx, in, info, handler)
}

func _SendMessage_ReturnParts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendMessageServer).ReturnParts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SendMessage/ReturnParts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendMessageServer).ReturnParts(ctx, req.(*RequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _SendMessage_ReturnAPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestPartID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendMessageServer).ReturnAPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SendMessage/ReturnAPart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendMessageServer).ReturnAPart(ctx, req.(*RequestPartID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SendMessage_AddPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAdd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendMessageServer).AddPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SendMessage/AddPart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendMessageServer).AddPart(ctx, req.(*RequestAdd))
	}
	return interceptor(ctx, in, info, handler)
}

func _SendMessage_DelPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestPartID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendMessageServer).DelPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SendMessage/DelPart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendMessageServer).DelPart(ctx, req.(*RequestPartID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SendMessage_UpPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendMessageServer).UpPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SendMessage/UpPart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendMessageServer).UpPart(ctx, req.(*RequestUp))
	}
	return interceptor(ctx, in, info, handler)
}

// SendMessage_ServiceDesc is the grpc.ServiceDesc for SendMessage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SendMessage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SendMessage",
	HandlerType: (*SendMessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Home",
			Handler:    _SendMessage_Home_Handler,
		},
		{
			MethodName: "OpenDB",
			Handler:    _SendMessage_OpenDB_Handler,
		},
		{
			MethodName: "ReturnParts",
			Handler:    _SendMessage_ReturnParts_Handler,
		},
		{
			MethodName: "ReturnAPart",
			Handler:    _SendMessage_ReturnAPart_Handler,
		},
		{
			MethodName: "AddPart",
			Handler:    _SendMessage_AddPart_Handler,
		},
		{
			MethodName: "DelPart",
			Handler:    _SendMessage_DelPart_Handler,
		},
		{
			MethodName: "UpPart",
			Handler:    _SendMessage_UpPart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}
